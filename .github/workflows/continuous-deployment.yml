# Continuous Deployment
#
# References:
#
# - https://github.com/actions/github-script
# - https://github.com/actions/setup-node
# - https://github.com/devmasx/merge-branch
# - https://github.com/bdougie/close-issues-based-on-label

---
name: continuous-deployment
on:
  pull_request:
    branches:
      - next
    types: [closed]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
jobs:
  continuous-deployment:
    if: |
      github.event.inputs.tag ||
      (startsWith(github.event.pull_request.head.ref, 'release/') 
      && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - id: get-release-details
        uses: actions/github-script@v4
        with:
          script: |
            let tag = context.payload.inputs.tag

            if (!tag) {
              tag = context.payload.pull_request.head.ref.split('release/')[1]
            }

            core.exportVariable('tag', tag)
      - id: get-publish-command
        uses: actions/github-script@v4
        with:
          script: |
            const { tag } = process.env

            let dtags = tag.split('-')[1] || ''

            if (dtags && dtags.includes('.')) dtags = dtags.split('.')[0]

            dtags = `--access public ${dtags}`.trim()

            core.exportVariable('publish_command', `npm publish build ${dtags}`)
      - id: publish-release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PAT_REPO_FLDV_ADMIN }}
          script: |
            const opts = github.repos.listReleases(context.repo)
            const releases = await github.paginate(opts)

            const release = releases.find(release => {
              console.log(process.env.tag, release)

              return release.name.startsWith(process.env.tag)
            })

            if (release && release.draft) {
              await github.repos.updateRelease({
                ...context.repo,
                draft: false, 
                release_id: release.id, 
                tag_name: process.env.tag 
              })
            }
      - id: setup-npmrc-gpr
        uses: actions/setup-node@v2
        with:
          cache: 'yarn'
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@flex-development'
      - id: publish-to-gpr
        run: ${publish_command}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT_GPR_FLDV }}
      - id: setup-npmrc-npm
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@flex-development'
      - id: publish-to-npm
        run: ${publish_command}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN_FLDV }}
      - id: update-production-branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          from_branch: next
          github_token: ${{ github.token }}
          target_branch: main
          type: now
      - id: close-merged-issues
        uses: bdougie/close-issues-based-on-label@master
        env:
          GITHUB_TOKEN: ${{ github.token }}
          LABEL: status:merged
      - id: add-status-released-label
        uses: actions/github-script@v4
        with:
          script: |
            const opts = github.issues.listForRepo(context.repo)
            const issues = await github.paginate(opts)

            await Promise.all(issues.map(issue => {
              issue.labels && issue.labels.forEach(({ name, number }) => {
                if (label.name === 'status:merged') {
                  return await github.issues.addLabels({
                    ...context.repo,
                    issue_number: number,
                    labels: ['status:released']
                  })
                }

                return
              })
            }))
