# Continuous Deployment
#
# References:
#
# - https://github.com/actions/github-script
# - https://github.com/actions/setup-node
# - https://github.com/devmasx/merge-branch
# - https://github.com/bdougie/close-issues-based-on-label

---
name: continuous-deployment
on:
  pull_request:
    branches:
      - release/**
    types: [closed]
jobs:
  get-deployment-details:
    name: Get Deployment Details
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Details
        id: release-details
        uses: actions/github-script@v4
        with:
          script: |
            const { 1: tag } = context.ref.split('release/')

            const opts = github.repos.listReleases(context.repo)
            const releases = await github.paginate(opts)
             
            let release = releases.find({ title } => title.startsWith(tag))

            core.exportVariable('tag', tag)
      - name: Get Publish Command
        id: publish-command
        uses: actions/github-script@v4
        with:
          script: |
            const { tag } = process.env

            let dtags = (tag.split('-')[1]?.split('.')[0] ?? '') || ''
            dtags = `--access public ${dtags}`.trim()

            core.exportVariable('publish_command', `npm publish build ${dtags}`)
  publish-release:
    name: Publish GitHub Release
    needs: get-deployment-details
    runs-on: ubuntu-latest
    steps:
      - id: publish
        uses: actions/github-script@v4
        with:
          script: |
            const opts = github.repos.listReleases(context.repo)

            const release = (await github.paginate(opts)).find(({ title }) => {
              return title.startsWith(process.env.tag)
            })

            if (release && release.draft) {
              await github.repos.updateRelease({
                ...context.repo,
                draft: false, 
                release_id: release.id, 
                tag_name: process.env.tag 
              })
            }
  publish-package:
    name: Publish package to GPR & NPM
    needs: [get-deployment-details, publish-release]
    runs-on: ubuntu-latest
    steps:
      - name: Setup .npmrc file [GPR]
        uses: actions/setup-node@v2
        with:
          cache: 'yarn'
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@flex-development'
      - name: Publish ${tag} [GPR]
        run: ${publish_command}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT_GPR_FLDV }}
      - name: Setup .npmrc file [NPM]
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@flex-development'
      - name: Publish ${tag} [NPM]
        run: ${publish_command}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN_FLDV }}
  update-production-branch:
    name: Update production branch
    needs: publish-package
    runs-on: ubuntu-latest
    steps:
      - id: merge
        uses: devmasx/merge-branch@v1.3.1
        with:
          from_branch: next
          github_token: ${{ github.token }}
          target_branch: main
          type: now
  close-merged-issues:
    name: Close issues with status:merged label
    needs: update-production-branch
    runs-on: ubuntu-latest
    steps:
      - id: close
        uses: bdougie/close-issues-based-on-label@master
        env:
          GITHUB_TOKEN: ${{ github.token }}
          LABEL: status:merged
  add-status-released-label:
    name: Add status:released label to closed issues
    needs: close-merged-issues
    runs-on: ubuntu-latest
    steps:
      - id: add
        uses: actions/github-script@v4
        with:
          script: |
            const opts = github.issues.listForRepo(context.repo)
            const issues = await github.paginate(opts)

            await Promise.all(issues.map(issue => {
              issue.labels && issue.labels.forEach(({ name, number }) => {
                if (label.name === 'status:merged') {
                  return await github.issues.addLabels({
                    ...context.repo,
                    issue_number: number,
                    labels: ['status:released']
                  })
                }

                return
              })
            }))
